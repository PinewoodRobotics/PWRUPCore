plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.2.1"
    id "com.google.protobuf" version "0.9.3"
    id "maven-publish" // For publishing as a library
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Defining my dependencies
dependencies {
    // WPILib dependencies
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    // Native libraries
    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    // Other dependencies
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation "com.google.protobuf:protobuf-java:3.22.2"
    implementation 'org.ejml:ejml-all:0.41'
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'org.jmdns:jmdns:3.5.7'
    
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation "com.google.protobuf:protobuf-java:3.22.2"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Setting up the Jar File as a library
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

// Configure for publishing as a library
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.22.2" // Use the desired protoc version
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { // Enable Java generation
                    option 'lite' // Use this option for smaller code (optional)
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/source/proto/main/java"
        }
    }
}